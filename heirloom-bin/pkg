#!/sbin/sh

##
## pkg: SVR4 package tools wrapper
##      Uses heirloom sh

## pkgtools
pkg_add="/usr/5bin/pkgadd -d"
pkg_ad="/usr/5bin/pkgadd"
pkg_rm="/usr/5bin/pkgrm"
pkg_trans="/usr/5bin/pkgtrans -s"
pkg_proto="/usr/5bin/pkgproto -c"
pkg_mk="/usr/5bin/pkgmk -o"
pkg_ck="/usr/5bin/pkginfo"

## locations
pkg_loc="/var/spool/pkg"
ports_loc="/usr/ports/"
port_loc="/usr/ports/"$category"/"$pkg""
conf_loc="/etc/pkg"
##
## packaging functions
##
chpkg() {
	#echo "===> Checking package"
	if [ -f "$pkg_loc"/"$pkg"-"$version".pkg ]
	then
        echo "======================================================================="
		/usr/ucb/echo "===> "$pkg_loc"/"$pkg"-"$version".pkg successfully created"
        echo "======================================================================="
    fi
}

mkpkg() {
	mkpkginfo
	mkproto
	/usr/ucb/echo "===> Creating package"
    	/usr/5bin/pkgmk -o
    	/usr/5bin/pkgtrans -s "$pkg_loc" "$pkg"-"$version".pkg "$pkg"
    	/usr/5bin/rm -r "$pkg_loc"/"$pkg"
    	/usr/5bin/rm -r /tmp/"$pkg"
	chpkg
}

mkproto() {
	/usr/ucb/echo "===> Creating prototype"
	/usr/5bin/pkgproto -c "$category" .=. > prototype

    # heirloom sed (derived from Solaris) has no -i option...
    tmp=`mktemp prototype.XXXXXX`
    /usr/5bin/sed '/=/!d' prototype > "$tmp" && /usr/5bin/cat "$tmp" > prototype && /usr/5bin/rm "$tmp"
    /usr/5bin/sed '1d;2d;' prototype > "$tmp" && /usr/5bin/cat "$tmp" > prototype && /usr/5bin/rm "$tmp"
    # newline
    /usr/5bin/sed '1s/^/i pkginfo\
    /' prototype > "$tmp" && /usr/5bin/cat "$tmp" > prototype && /usr/5bin/rm "$tmp"
}

mkpkginfo() {
	echo "===> Creating pkginfo"
	echo "PKG="$pkg"" >> pkginfo
	echo "NAME="$name"" >> pkginfo
	echo "VERSION="$version"" >> pkginfo
	echo "ARCH="$arch"" >> pkginfo
	echo "CATEGORY="$category"" >> pkginfo
	echo "PSTAMP="$version"" >> pkginfo
	echo "BASEDIR="$basedir"" >> pkginfo
}

extract() {
	echo "===> Extracting archive"
	case "$1" in
		*.tar.bz2|*.tbz2|*.tbz)         tar xvjf "$1" ;;
            	*.tgz)                          tar zxvf "$1" ;;
            	*.tar.gz)                       tar xvzf "$1" ;;
            	*.tar.xz)                       tar xvJf "$1" ;;
            	*.tar)                          tar xvf "$1" ;;
            	*.rar)                          7z x "$1" ;;
            	*.zip)                          unzip "$1" ;;
            	*.7z)                           7z x "$1" ;;
            	*.lzo)                          lzop -d  "$1" ;;
            	*.gz)                           gunzip "$1" ;;
            	*.bz2)                          bunzip2 "$1" ;;
            	*.Z)                            uncompress "$1" ;;
            	*.xz|*.txz|*.lzma|*.tlz)        xz -d "$1" ;;
            	*) echo "'$1' could not be decompressed." ;;
        esac
}

##
## pkg functions
##

mkdep() {
    echo "===> Checking dependencies for $pkg"
    for i in $deps
    do
        echo "===> Checking dependencies for $i"
        a=`echo $i | awk -F '/' '{print $2}'`
        d=`/usr/5bin/pkginfo | grep -c $a`
        if [ $d = 0 ]
        then
            echo "======================================================================="
            echo "===> Building $i"
            echo "======================================================================="
            pkgbuild $i
        else
            echo "===> $a is already installed"
        fi
    done
}


update() {
    echo "===> Checking ChangeLog.txt"
    #echo "1=$1"
    #echo "2=$2"
    old=`/usr/5bin/pkginfo -x $1 | /usr/5bin/awk 'NR==2{print $2}'`
    new=`/usr/5bin/grep $1 "$conf_loc"/ChangeLog.txt | /usr/5bin/awk '{print $2}'`
    if [ $old = $new ]
    then
        echo ""$1"-"$old".pkg is the latest version"
    elif [ $new > $old ]
    then
        echo "===> Upgrade "$1"-"$old" to "$1"-"$new" (y/n)?"
        read answer
        if [ $answer = y ]; then
            echo "===> Removing old package"
            /usr/5bin/pkgrm -n "$1"
            echo "===> Upgrading package"
            ver=`ls "$pkg_loc" | /usr/5bin/grep $1 | /usr/5bin/tail -n1`
            /usr/5bin/pkgadd -d $pkg_loc/"$ver"
        elif [ $answer = n ]; then
            exit 1
        fi
    fi
}

envir() {
num=`ls $pkg_loc | /usr/5bin/grep pkg | wc -l`
inum=`$pkg_ck | wc -l`
echo "
No. of Stream Packages (*.pkg) in cache: "$num"
No. of Installed Packages:               "$inum"
Package cache location:                  $pkg_loc
SVR4 package tools:                      $pkg_add
                                         $pkg_rm
                                         $pkg_proto
                                         $pkg_trans
"
}

usage() {
echo "usage: pkg [command] [argument]

Available commands:
search  (-s)  - searches the repository [TODO]
install (-i)  - installs SVR4 package
update  (-u)  - updates packages [TODO]
remove  (-r)  - uninstalls a package but does not delete it from cache
delete  (-d)  - deletes package from cache and system
sync    (-sy) - sync with repository [TODO]
list    (-l)  - list all installed packages
verify  (-vf) - verify hashes of packages
env     (-e)  - outputs pkg environment and package cache details
ver     (-v)  - check pkg version
help    (-h)  - outputs this message"
}

##
## pkg
##
case "$1" in
	install*|-i*|update*|-u*|remove*|-r*|delete*|-d*|sync*|-sy*)
        # using heirloom tools to check for root
    	id=`id | /usr/5bin/awk -F'=' '{print $2}' | /usr/5bin/awk -F'(' '{print $1}'`
        if [ "$id" != 0 ]
        then
        	echo "You must be root"
        	exit 1
    	elif [ "$id" = 0 ]
        then
		case "$1" in
			install*|-i*)
				if [ -n "$2" ]
				then
					pack=$2
                                        ver=`ls "$pkg_loc" | /usr/5bin/s42/grep "\<$pack\>" | /usr/5bin/tail -n1`
					if [ -z "$ver" ]
					then
						echo "Package not found"
						exit 1
					elif [ -n "$ver" ]
					then
						/usr/5bin/pkgadd -d "$pkg_loc"/"$ver"
					fi
				else
					echo "You must specify a package name"
					exit 1
				fi
				;;
            update*|-u*)
            	update "$2"
            		;;
			remove*|-r*)
				"$pkg_rm" "$2"
			;;
            		delete*|-d*)
            			/usr/5bin/rm "$pkg_loc"/"$2"-*.pkg
            		;;
            		sync*|-sy*)
            			echo "TODO"
            		;;
		esac
	fi
	;;
    	search*|-s*)
    	echo "TODO"
    	;;
    	list*|-l*)
    	"$pkg_ck"
    	;;
    	help*|-h*)
    	usage
    	;;
    	verify*|-vf*)
		if [ -z "$2" ]
		then
			echo "You must specify a package"
			exit 1
		elif [ -n "$2" ]
		then
		sha256sum "$pkg_loc"/"$2"-*.pkg
		fi
    	;;
    	env*|-e*)
	envir
    	;;
    	ver*|-v*)
    	/usr/5bin/pkginfo -x pkgtools
    	;;
esac
