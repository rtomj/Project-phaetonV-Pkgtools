#!/sbin/sh

##
## pkg: SVR4 package tools wrapper
##	uses heirloom sh 

## pkgtools
pkg_add="/usr/5bin/pkgadd -d"
pkg_ad="/usr/5bin/pkgadd"
pkg_rm="/usr/5bin/pkgrm"
pkg_trans="/usr/5bin/pkgtrans -s"
pkg_proto="/usr/5bin/pkgproto -c"
pkg_mk="/usr/5bin/pkgmk -o"
pkg_ck="/usr/5bin/pkginfo"

## locations
pkg_loc="/var/spool/pkg"
ports_loc="/usr/ports/"
port_loc="/usr/ports/"$category"/"$pkg""
conf_loc="/etc/pkg"

## Force some heirloom tools just in case PATH is incorrect
sed="/usr/5bin/sed"
awk="/usr/5bin/awk"
grep="/usr/5bin/grep"
sgrep="/usr/5bin/s42/grep"
tail="/usr/5bin/tail"

update() {
    echo "===> Checking ChangeLog.txt"
    old=`$pkg_ck -x $1 | $awk 'NR==2{print $2}'`
    new=`$grep $1 "$conf_loc"/ChangeLog.txt | $awk '{print $2}'`
    if [ $old -eq $new ]
    then
        echo ""$1"-"$old".pkg is the latest version"
    elif [ $new -gt $old ]
    then
        echo "===> Upgrade "$1"-"$old" to "$1"-"$new" (y/n)?"
        read answer
        if [ $answer = y ]; then
            echo "===> Removing old package"
            $pkg_rm -n "$1"
            echo "===> Upgrading package"
	    # maybe call pkgbuild?	
            ver=`ls "$pkg_loc" | $grep $1 | $tail -n1`
            $pkg_add $pkg_loc/"$ver"
        elif [ $answer = n ]; then
            exit 1
        fi
    fi
}

install_package() {
	if [ -n "$1" ]
	then
		pack=$1
		ver=`ls "$pkg_loc" | "$grep" "\<$pack\>" | $tail -n1`
		if [ -z "$ver" ]
		then
			echo "Package not found"
			exit 1
		elif [ -n "$ver" ]
		then
			$pkg_add "$pkg_loc"/"$ver"
		fi
	else
	echo "You must specify a package name"
	exit 1
fi
}

envir() {
num=`ls $pkg_loc | $grep pkg | wc -l`
inum=`$pkg_ck | wc -l`
echo "
No. of Stream Packages (*.pkg) in cache: "$num"
No. of Installed Packages:               "$inum"
Package cache location:                  $pkg_loc
SVR4 package tools:                      $pkg_add
                                         $pkg_rm
                                         $pkg_proto
                                         $pkg_trans
"
}

usage() {
echo "usage: pkg [command] [argument]

Available commands:
search  (-s)  - searches the repository [TODO]
build	(-b)  - build a package
install (-i)  - installs SVR4 package
update  (-u)  - updates packages [TODO]
remove  (-r)  - uninstalls a package but does not delete it from cache
delete  (-d)  - deletes package from cache and system
sync    (-sy) - sync with repository [TODO]
list    (-l)  - list all installed packages
verify  (-vf) - verify hashes of packages
env     (-e)  - outputs pkg environment and package cache details
ver     (-v)  - check pkg version
help    (-h)  - outputs this message"
}

idcheck() {
	# Check for root using heirloom tools.
	# /usr/5bin/id does not have a '-u' option
	# /usr/5bin/posix/id does
	i=`which id`
	if [ $i -eq '/usr/5bin/posix/id' ]
	then
		echo "POSIX heirloom id"
		id=`/usr/5bin/posix/id -u`
	else
		echo "Falling back to default"
		# /usr/5bin/awk doesn't work with multiple field separators
		id=`id | $awk -F'=' '{print $2}' | $awk -F'(' '{print $1}'`
	fi
}

##
## pkg
##
case "$1" in
	install*|-i*|update*|-u*|remove*|-r*|delete*|-d*|sync*|-sy*|build*|-b*)
    	id=`id | $awk -F'=' '{print $2}' | $awk -F'(' '{print $1}'`
	if [ "$id" -ne 0 ]
        then
        	echo "You must be root"
        	exit 1
    	elif [ "$id" -eq 0 ]
        then
		case "$1" in
		install*|-i*)
			install_package $2	
			;;
            	update*|-u*)
            		update "$2"
            		;;
		remove*|-r*)
			"$pkg_rm" "$2"
			;;
            	delete*|-d*)
            		rm "$pkg_loc"/"$2"-*.pkg
            		;;
            	sync*|-sy*)
            		echo "TODO"
            		;;
		build*|-b*)
			pkgbuild "$2"
			;;
		esac
	fi
	;;
    	search*|-s*)
    	echo "TODO"
    	;;
    	list*|-l*)
    	"$pkg_ck"
    	;;
    	help*|-h*)
    	usage
    	;;
    	verify*|-vf*)
		if [ -z "$2" ]
		then
			echo "You must specify a package"
			exit 1
		elif [ -n "$2" ]
		then
		sha256sum "$pkg_loc"/"$2"-*.pkg
		fi
    	;;
    	env*|-e*)
	envir
    	;;
    	ver*|-v*)
    	$pkg_ck -x pkgtools
    	;;
esac
